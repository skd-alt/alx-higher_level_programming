# 2-matrix_divided.txt

===============================
 How to Use 2-matrix_divided.py
===============================

This library is very simple, since it only has one function called
``matrix_divided()``.

Numbers
=======

``matrix_divided()`` returns the matrix after division by a factor in its arguments.  For numbers,
that value is equivalent to using the ``/`` operator for each element of a matrix.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [2, 4, 6],
    ...     [8, 10, 12]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Rounding of works

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Divides floats 

::

    >>> matrix = [
    ...     [1.2, 2.6, 3.9],
    ...     [0.9, 3.4, 1.8]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.4, 0.87, 1.3], [0.3, 1.13, 0.6]]

divides negative numbers

::

    >>> matrix = [
    ...     [-1, -2, -3],
    ...     [-0.9, -3.4, -1.8]
    ... ]
    >>> print(matrix_divided(matrix, 3))  
    [[-0.33, -0.67, -1.0], [-0.3, -1.13, -0.6]]

div is a float

::

    >>> matrix = [
    ...     [5, 10, 15],
    ...     [2.5, 7.5, 12.5]
    ... ]
    >>> print(matrix_divided(matrix, 2.5))
    [[2.0, 4.0, 6.0], [1.0, 3.0, 5.0]]

Doesnot affect original matrix

::

    >>> print(matrix)
    [[5, 10, 15], [2.5, 7.5, 12.5]]

Zero matrix

::

    >>> matrix = [
    ...     [0, 0, 0],
    ...     [0, 0, 0]
    ... ]
    >>> print(matrix_divided(matrix, 2.5))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

Non-Numbers
===========

The parameter ``matrix`` must be a list of lists consisting of either ints or
floats. If ``matrix`` is not a list, a TypeError is raised.

::

    >>> matrix = "not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will succeed.

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

The same TypeError is raised yet again if any elements in ``matrix`` are
neither ints nor floats.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, "not a number", 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Finally, all the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError is raised.

::

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Invalid Divisors
================

The parameter ``div`` must be either an int or float. Otherwise, a TypeError
is raised.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "not a number"))
    Traceback (most recent call last):
    TypeError: div must be a number

::

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

::

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
