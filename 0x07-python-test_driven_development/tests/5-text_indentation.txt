# 5-text_indentation.txt

=================================
 How to Use 5-text_indentation.py
=================================

This library is very simple, since it only has one function called
``text_indentation()``.

Strings
=======

``text_indentation()`` prints thetext indentation where ".,?,:" appear.

::

    >>> text_indentation = __import__('5-text_indentation').text_indentation
    >>> text_indentation("Hi my name is Sipho. I live at 24 street. Gauteng South Africa.")
    Hi my name is Sipho.
    <BLANKLINE>
    I live at 24 street.
    <BLANKLINE>
    Gauteng South Africa.
    <BLANKLINE>

test "?"

::

    >>> text_indentation("Hi my name is Sipho? I live at 24 street? Gauteng South Africa?")
    Hi my name is Sipho?
    <BLANKLINE>
    I live at 24 street?
    <BLANKLINE>
    Gauteng South Africa?
    <BLANKLINE>

test ":"

::

    >>> text_indentation("Hi my name is Sipho: I live at 24 street: Gauteng South Africa:")
    Hi my name is Sipho:
    <BLANKLINE>
    I live at 24 street:
    <BLANKLINE>
    Gauteng South Africa:
    <BLANKLINE>

testing of mixed case

::

    >>> text_indentation("Hi my name is Sipho. I live at 24 street? Gauteng South Africa:")
    Hi my name is Sipho.
    <BLANKLINE>
    I live at 24 street?
    <BLANKLINE>
    Gauteng South Africa:
    <BLANKLINE>

single line

::

    >>> text_indentation("Hi my name is Sipho.     ")
    Hi my name is Sipho.
    <BLANKLINE>

with spaces

::

    >>> text_indentation("      Hi my name is Sipho.         I live at 24 street?  Gauteng South Africa: ")
    Hi my name is Sipho.
    <BLANKLINE>
    I live at 24 street?
    <BLANKLINE>
    Gauteng South Africa:
    <BLANKLINE>

::

    >>> text_indentation("No ending period, what bad grammar")
    No ending period, what bad grammar

::

    >>> text_indentation("Let's print a new-line! Here goes:\nPrinted.")
    Let's print a new-line! Here goes:
    <BLANKLINE>
    <BLANKLINE>
    Printed.
    <BLANKLINE>

::

    >>> text_indentation("\n\n\n We just printed three new lines.")
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    We just printed three new lines.
    <BLANKLINE>

::
    >>> text_indentation("A sneaky \n new line.")
    A sneaky 
    new line.
    <BLANKLINE>

Invalid Text
============

The paramter ``text`` must be a string. Otherwise, a TypeError is raised.

::

    >>> text_indentation(7)
    Traceback (most recent call last):
    TypeError: text must be a string

::

    >>> text_indentation({"one": 1, "two": 2})
    Traceback (most recent call last):
    TypeError: text must be a string

::

    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string


